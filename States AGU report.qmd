---
title: "Burn Catch Up Calculations"
format: pdf
editor: source
date: today
---

# The goal

Slack from Winslow, 6/16/2025

> Getting ready for agu! Hi Lora, I’d like for us to submit the fire deficit work to agu. Abstracts are due end of July. So here’s what would be great to work on; 1. similar summaries as with the Sparks but by state. 2 an analysis by state, west wide, wui/ no wui, veg type asking the question; how much more area would need to burn over the next decade to erase the deficit?  Sound good? I like for us to keep using the Goldilocks version Crystal came up with. 

Overall methodology comments from Lora:

One could approach this two ways: how much areas in deficit need to burn for them to catch up to the historical fire regime, ignoring areas in surplus (and some balanced zone, like the Goldilocks areas in some of our existing reports). Or we could consider a state as a whole unit, and allow existing surpluses to offset the catch up burning. After consultation with Winslow, he would like both (probably going to use numbers where areas in surplus have been excluded).

We need a numbers buffet, to be able to give ranges, and to approach from a conservative and less conservative direction. This calculates:

-  Amount to burn to take the deficit to 0
-  Amount to burn to enter the goldilocks zone with an error margin of 20%
-  Amount to burn to erase half the deficit

```{r setup, include=FALSE}
#| echo: false
library(terra)
library(sf)
library(kableExtra)
library(ggplot2)
library(exactextractr)
library(tidyverse)
library(tidyterra)
library(patchwork)
library(gpkg)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(messages = FALSE)
knitr::opts_chunk$set(warnings = FALSE)
knitr::opts_chunk$set(results = 'asis')
#\options(knitr.table.format = "latex")
terraOptions(tempdir="D:/workspace/Lora/temp") # Terminator
#terraOptions(tempdir="D:/Lora/temp") # Groot
```

```{r prep}
#| eval: true

ha_to_acres <- 2.47105
```

States reporting is just copied from SPARKs reporting doc. This will prepare statistics and maps of each state in a manner identical to the most recent SPARKs reporting.

```{r states-reporting}
#| eval: false
#| echo: false

source("functions.R")

#-----------------------------------------------------------------------------#
# Load necessary rasters. Note that we are about to recalculate a bunch of 
# these later, with a longer time horizon. But these are our existing ones used
# for reporting on the current state of things.
#-----------------------------------------------------------------------------#
fri <- terra::rast("../temp_rasters/all_fri_vals.tif")
veg <- terra::rast("../temp_rasters/combined_veg_area.tif")
wui <- terra::rast("../temp_rasters/wui.tif")

#----- Load ecoregions with long-term FRI ------------------------------------#
long_forst_def <- terra::rast("../temp_rasters/eco_forest_def.tif")
long_grass_def <- terra::rast("../temp_rasters/eco_grass_def.tif")
long_shrub_def <- terra::rast("../temp_rasters/eco_shrub_def.tif")

short_def <- terra::rast("../western_us_fire_deficit.tif")


#----- Load states -----------------------------------------------------------#
states <- terra::vect("../Data/s_05mr24.shp")
states <- terra::project(states, fri)
states <- terra::crop(states, fri)

all_states <- unique(states$NAME)

# Remove state slivers
all_states <- all_states[which(!all_states %in% c("North Dakota", "Texas",
                                                  "Kansas", "Oklahoma",
                                                  "South Dakota", "Nebraska"))]

summary_table_dat <- NULL

for (state_name in all_states) {
  
  one_state <- states[states$NAME == state_name]
  summary_dat <- do_a_region(state_name, one_state, TRUE)
  summary_table_dat <- rbind(summary_table_dat, summary_dat) 
}


write.csv(summary_table_dat, "Reporting/State stats.csv", row.names=F)
rm(summary_dat, summary_table_dat, fri, veg, wui, long_forst_def, 
   long_grass_def, long_shrub_def, short_def)
invisible(gc())
```

```{r make-pretty-tables}
#| eval: false
#| echo: false

#-----------------------------------------------------------------------------#
# Based on county
#-----------------------------------------------------------------------------#
dat <- read.csv("Reporting/State stats.csv")

summary_dat <- dat %>% select(Region, Vegetation, Total_area,
                              Deficit_area, Surplus_area, Goldilocks_area, 
                              mean_deficit, sd_deficit) %>%
  mutate(meansd = paste(round(mean_deficit, 2), "±", 
                        round(sd_deficit, 2)),
         Total_area      = round(Total_area, 0),
         Deficit_area    = round(Deficit_area, 0),
         Surplus_area    = round(Surplus_area, 0),
         Goldilocks_area = round(Goldilocks_area, 0)) %>%
  filter(Vegetation %in% c("All forest", "Grassland", "Shrubland")) %>%
  rename('State' = Region,
         'Vegetation type' = Vegetation,
         'Total area (ac)' = Total_area,
         'Area in deficit (ac)' = Deficit_area,
         'Area in surplus (ac)' = Surplus_area,
         'Area in balance (ac)' = Goldilocks_area,
         'Mean deficit (sd)' = meansd) %>%
  select(-c(mean_deficit, sd_deficit))
write.csv(summary_dat, "Reporting/Pretty table states.csv", row.names=F)
  

summary_dat <- dat %>% select(Region, Vegetation, Total_area,
                              Deficit_area, Surplus_area, Goldilocks_area, 
                              mean_deficit, sd_deficit) %>%
  mutate(meansd = paste(round(mean_deficit, 2), "±", 
                        round(sd_deficit, 2)),
         Total_area      = round(Total_area, 0),
         Deficit_area    = round(Deficit_area, 0),
         Surplus_area    = round(Surplus_area, 0),
         Goldilocks_area = round(Goldilocks_area, 0)) %>%
  filter(Vegetation %in% c("Frequent fire (FRI < 20)",
                           "Frequent fire (FRI 20-40)",
                           "Infrequent fire")) %>%
  rename('State' = Region,
         'Forest type' = Vegetation,
         'Total area (ac)' = Total_area,
         'Area in deficit (ac)' = Deficit_area,
         'Area in surplus (ac)' = Surplus_area,
         'Area in balance (ac)' = Goldilocks_area,
         'Mean deficit (sd)' = meansd) %>%
  select(-c(mean_deficit, sd_deficit))
write.csv(summary_dat, "Reporting/Pretty table states detailed forest.csv", row.names=F)


summary_dat <- dat %>% select(Region, Vegetation, Total_area,
                              Deficit_area, Surplus_area, Goldilocks_area, 
                              mean_deficit, sd_deficit) %>%
  mutate(meansd = paste(round(mean_deficit, 2), "±", 
                        round(sd_deficit, 2)),
         Total_area = round(Total_area, 0),
         Deficit_area = round(Deficit_area, 0),
         Surplus_area = round(Surplus_area, 0),
         Goldilocks_area = round(Goldilocks_area, 0)) %>%
  filter(Vegetation %in% c("Forest WUI",
                           "Forest non-WUI",
                           "Grass WUI",
                           "Grass non-WUI",
                           "Shrub WUI",
                           "Shrub non-WUI")) %>%
  rename('State' = Region,
         'Forest type' = Vegetation,
         'Total area (ac)' = Total_area,
         'Area in deficit (ac)' = Deficit_area,
         'Area in surplus (ac)' = Surplus_area,
         'Area in balance (ac)' = Goldilocks_area,
         'Mean deficit (sd)' = meansd) %>%
  select(-c(mean_deficit, sd_deficit))
write.csv(summary_dat, "Reporting/Pretty table states WUI.csv", row.names=F)
#-----------------------------------------------------------------------------#
```



# Calculating area needed to burn

I base this on a raster that calculates, for each grid cell, the number of times it needs to burn to reach 0 deficit in 10 more years. Burn totals are therefore the sum of cell values multipled by the cell area. Any cell with a negative value is in surplus and we have the option of filtering it out.

## Shorter FRI cells
For short FRI cells, for each cell, I calculate the number of expected burns in 50 years:

$$n_{exp} = \frac{50}{FRI}$$

I can then compare that to how many times they've burned so far in the last 40 years. Note that since "short FRI" now goes up to 50 years, we will have a slightly larger number of these cells to work with.

**Output:** raster "catchup_burns0.tif" that will have number of times needed to burn to have 0 deficit in 10 years; "catchup_burns1_2.tif" has number of burns to get to within a deficit value of 1.2 (the goldilocks zone); "catchup_burns2.tif" has number of burns to get within a deficit of -2. **Note that for all of these rasters, there is only a value where FRI <= 50.**

For areas in surplus, the values will be negative, and thus they can be easily filtered out.


```{r create-50-fri-raster}
#| eval: false
#| echo: false

#-----------------------------------------------------------------------------#
# Calculate the number of expected fires for the period 10 years from now, 
# based on FRI. We won't use our existing FRI raster, since it's masked to
# areas with FRI <= 40. We will redo the mask to FRI <= 50.
#-----------------------------------------------------------------------------#

#----- Get the CSV data that has fire return interval for all BPS codes ------#
bps <- read.csv("Z:/project_data/landfire data/fire return interval/LF2016_FRI_200_CONUS/CSV_Data/LF16_FRI_200.csv")

#----- Filter out those units with an all-fire FRI <= 50 years ---------------#
good_bps <- which(bps$FRI_ALLFIR > 0 & bps$FRI_ALLFIR <= 50) 

#----- Replace BPS code with FRI, making NAs for bad FRIs --------------------#
# This matrix will be used to create a FRI raster out of the BPS codes 
# currently stored in the raster
mat <- matrix(c(bps$Value[good_bps], bps$FRI_ALLFIR[good_bps]), 
              nrow=length(good_bps), ncol=2)

fri_crop <- terra::rast("../temp_rasters/fri_crop.tif")
tile <- terra::classify(fri_crop, mat, others=NA)
writeRaster(tile, "../temp_rasters/west_us_FRI50.tif", overwrite = TRUE)
```

```{r calculate-burn-number-raster}
#| eval: false

#----- Actual number of fires - wild plus prescribed -------------------------#
# These rasters are produced as part of the overall fire deficit product and are
# documented more there
n_act <- terra::rast("../temp_rasters/num_fires.tif") +
         terra::rast("../temp_rasters/num_rx.tif")

#----- Expected number of fires ----------------------------------------------#
# This is a raster where the value is the FRI for any spot where FRI <= 50, and
# NA otherwise
fri <- terra::rast("../temp_rasters/west_us_FRI50.tif")
n_exp <- 50/fri

#----- Number to burn --------------------------------------------------------#
# This will be negative for surplus so we have the option of balancing out or
# only thinking about deficit
def <- n_exp - n_act
writeRaster(def, "../temp_rasters/catchup_burns0.tif", overwrite=T)

#----- Expected number of fires to get within goldilocks zone ----------------#
def <- (n_exp / 1.2) - n_act
writeRaster(def, "../temp_rasters/catchup_burns1_2.tif", overwrite=T)

#----- Expected number of fires to get within deficit of -2 ------------------#
def <- (n_exp / 2) - n_act
writeRaster(def, "../temp_rasters/catchup_burns2.tif", overwrite=T)
```


## Longer FRI cells

For longer FRI cells that take an ecoregion value instead: first, consider them in specific subsets (for instance, grassland in longer FRI areas). We will treat the mean FRI for those cells as equal to the fire rotation period. So if the mean FRI is 200 years, we will assume it takes 200 years to burn the entire area of interest one time.

The expected amount of burned area $A_{exp}$ in 50 years is therefore:

$$A_{exp} = A * \frac{t}{\overline{FRI}}$$
where *A* is total area of the subset of cells, *t* is 50 years, and $\overline{FRI}$ is mean FRI for those cells.

**Outputs**: many rasters of the name format "eco_[veg]_numburns[level].tif", where veg is one of all_veg, forest, grass, and shrub; and level is one of 0 (for burning to 0 deficit), 1_2 (for burning to goldilocks zone), or 2 (for burning to half deficit). There are values areas in the appropriate vegetation type and where FRI > 50, and NA for everywhere else.

```{r create-western-us-longfri-rast}
#| eval: false
#| echo: false

#-----------------------------------------------------------------------------#
# Prepare a raster of FRI, for those areas where FRI > 50 years
#-----------------------------------------------------------------------------#

#----- Get the CSV data that has fire return interval for all BPS codes ------#
bps <- read.csv("Z:/project_data/landfire data/fire return interval/LF2016_FRI_200_CONUS/CSV_Data/LF16_FRI_200.csv")

#----- Filter out those units with an all-fire FRI <= 50 years ---------------#
good_bps <- which(bps$FRI_ALLFIR > 50) 

#----- Replace BPS code with FRI, making NAs for bad FRIs --------------------#
# This matrix will be used to create a FRI raster out of the BPS codes 
# currently stored in the raster
mat <- matrix(c(bps$Value[good_bps], bps$FRI_ALLFIR[good_bps]), 
              nrow=length(good_bps), ncol=2)

fri_crop <- terra::rast("../temp_rasters/fri_crop.tif")
fri <- terra::classify(fri_crop, mat, others=NA)
writeRaster(fri, "../temp_rasters/west_us_long_FRI50.tif", overwrite=TRUE)
```


```{r calculate-ecoregion-fri-veg-area}
#| eval: FALSE

#-----------------------------------------------------------------------------#
# Calculate the area of each veg type within each ecoregion for only those
# areas with a FRI > 50, and calculate the amount of area that has been
# burned. Also calculate the SUM of FRI. These are grid cell counts and are
# not helpful in raw form, but they will help us accurately calculate metrics.
# For instance, sum of FRI is so we can get an average FRI across discontinuous
# ecoregion areas.
#-----------------------------------------------------------------------------#

#----- Load ecoregions, project, and crop appropriately ----------------------#
eco <- terra::vect("../Data/level_3_ecoregion/eco_region.shp")
states <- terra::vect("../Data/s_05mr24.shp")
eco <- terra::project(eco, fri)
states <- terra::project(states, fri)
states <- terra::crop(states, fri)
eco <- terra::crop(eco, fri)
eco <- terra::crop(eco, states)

#----- Load a raster that has FRI values where FRI > 50, and NA otherwise ----#
fri <- terra::rast("../temp_rasters/west_us_long_FRI50.tif")

#----- Number of fires, wild and prescribed together -------------------------#
num_fires <- terra::rast("../temp_rasters/num_fires.tif") +
             terra::rast("../temp_rasters/num_rx.tif")

#-----------------------------------------------------------------------------#
# All veg area - for forests, grasslands, and shrublands combined (ignoring
# all else)
#-----------------------------------------------------------------------------#
all_veg <- terra::rast("../temp_rasters/combined_veg_area.tif")

# Make all values 1, so I can easily add and subtract
all_veg <- terra::classify(all_veg, cbind(2:3, c(1,1)), others=NA)

# Create a raster that masks out combined veg area area on long FRIs
good_veg <- fri + all_veg
good_veg <- good_veg - 1 # restoring FRI value

#----- Sum of FRI by ecoregion -----------------------------------------------#
sum_fri <- exactextractr::exact_extract(fri, sf::st_as_sf(eco), fun='sum')

#----- FRP: total area -------------------------------------------------------#
# Create a raster that has 1 for areas where FRI > 50, and NA elsewhere
good_for <- ifel(!is.na(fri), 1, NA)

# Calculate number of cells left in each ecoregion
vv <- exactextractr::exact_extract(good_for, sf::st_as_sf(eco), fun='sum')

#----- How much of this area has burned? -------------------------------------#
# Make a raster with number of fires in our focus veg area and NA otherwise
good_fire <- good_for + num_fires # Sum, to make NA cells not in our area
good_fire <- good_fire - 1 # Get rid of the extra 1 from good_for

# Calculate sum of burned cells left in each ecoregion
v2 <- exactextractr::exact_extract(good_fire, sf::st_as_sf(eco), fun='sum')

forest_dat <- data.frame(Name = eco$NA_L3NAME, 
                         Sum_FRI = sum_fri,
                         Total_Area = vv,
                         Area_Burned = v2)
write.csv(forest_dat, "../all_veg_cells_by_ecoregion_long_FRI50.csv", row.names = F)


rm(good_veg, all_veg, good_fire)
gc()
#-----------------------------------------------------------------------------#



#-----------------------------------------------------------------------------#
# Repeat the process for just forest
#-----------------------------------------------------------------------------#
forest <- terra::rast("../western_us_forest.tif")

# Create a raster that masks out forest area on long FRIs
good_for <- fri + forest
good_for <- good_for - 1 # restoring FRI value

#----- Sum of FRI by ecoregion -----------------------------------------------#
sum_fri <- exactextractr::exact_extract(good_for, sf::st_as_sf(eco), fun='sum')

# Create a raster that has 1 for areas of forest and FRI > 50, and NA elsewhere
# We can start by summing; this will set NAs to NAs for both
good_for <- ifel(!is.na(good_for), 1, NA)

# Calculate number of cells left in each ecoregion
vv <- exactextractr::exact_extract(good_for, sf::st_as_sf(eco), fun='sum')

#----- How much of this area has burned? -------------------------------------#
good_fire <- good_for + num_fires # Sum to NA out things not in our area
good_fire <- good_fire - 1 # Get rid of the extra 1 from good_for

# Calculate sum of burned cells left in each ecoregion
v2 <- exactextractr::exact_extract(good_fire, sf::st_as_sf(eco), fun='sum')

forest_dat <- data.frame(Name = eco$NA_L3NAME, 
                         Sum_FRI = sum_fri,
                         Total_Area = vv,
                         Area_Burned = v2)
write.csv(forest_dat, "../forest_cells_by_ecoregion_long_FRI50.csv", row.names = F)


rm(forest, good_for, good_fire)
gc()
#-----------------------------------------------------------------------------#



#-----------------------------------------------------------------------------#
# Grassland
#-----------------------------------------------------------------------------#
grass <- terra::rast("../western_us_grass.tif")

# Create a raster that masks out grass area on long FRIs
good_gr <- fri + grass
good_gr <- good_gr - 1 # restoring FRI value

#----- Sum of FRI by ecoregion -----------------------------------------------#
sum_fri <- exactextractr::exact_extract(good_gr, sf::st_as_sf(eco), fun='sum')

# Create a raster that has 1 for areas of forest and FRI > 50, and NA elsewhere
# We can start by summing; this will set NAs to NAs for both

good_gr <- ifel(!is.na(good_gr), 1, NA)

vv <- exactextractr::exact_extract(good_gr, sf::st_as_sf(eco), fun='sum')

good_fire <- good_gr + num_fires # Sum to NA out things not in our area
good_fire <- good_fire - 1 # Get rid of the extra 1 from good_gr

# Calculate sum of burned cells left in each ecoregion
v2 <- exactextractr::exact_extract(good_fire, sf::st_as_sf(eco), fun='sum')

grass_dat <- data.frame(Name = eco$NA_L3NAME, 
                        Total_Area = vv,
                        Sum_FRI = sum_fri,
                        Area_Burned = v2)
write.csv(grass_dat, "../grass_cells_by_ecoregion_long_FRI50.csv", row.names = F)
rm(grass, good_gr, good_fire)
gc()

#-----------------------------------------------------------------------------#
# Shrub
#-----------------------------------------------------------------------------#
shrub <- terra::rast("../western_us_shrub.tif")

# Create a raster that masks out shrub area on long FRIs
good_shrub <- fri + shrub
good_shrub <- good_shrub - 1 # restoring FRI value

#----- Sum of FRI by ecoregion -----------------------------------------------#
sum_fri <- exactextractr::exact_extract(good_shrub, sf::st_as_sf(eco), fun='sum')

# Create a raster that has 1 for areas of forest and FRI > 50, and NA elsewhere
# We can start by summing; this will set NAs to NAs for both
good_shrub <- ifel(!is.na(good_shrub), 1, NA)

vv <- exactextractr::exact_extract(good_shrub, sf::st_as_sf(eco), fun='sum')

good_fire <- good_shrub + num_fires # Sum to NA out things not in our area
good_fire <- good_fire - 1 # Get rid of the extra 1 from good_shrub

shrub_dat <- data.frame(Name = eco$NA_L3NAME, 
                        Total_Area = vv,
                        Sum_FRI = sum_fri,
                        Area_Burned = v2)
write.csv(shrub_dat, "../shrub_cells_by_ecoregion_long_FRI50.csv", row.names = F)
rm(shrub, good_shrub)
gc()
```


```{r make-long-fri-ecoregions-rasters}
#| eval: false

#-----------------------------------------------------------------------------#
# Calculate the catchup burns, attach them to the ecoregion polygons, and turn
# those values into rasters for each veg type and ecoregion.
#-----------------------------------------------------------------------------#

# Prep ecoregions shapefile; we will add deficit values directly to the 
# shapefile
eco <- terra::vect("../Data/level_3_ecoregion/eco_region.shp")
states <- terra::vect("../Data/s_05mr24.shp")

fri <- terra::rast("../temp_rasters/west_us_long_FRI50.tif")
eco <- terra::project(eco, fri)
states <- terra::project(states, fri)
states <- terra::crop(states, fri)

#----- Crop level 3 ecoregions to study domain -------------------------------#
eco <- terra::crop(eco, fri)

#----- And to states ---------------------------------------------------------#
eco <- terra::crop(eco, states)

hist_time <- 50

#-----------------------------------------------------------------------------#
# Do the calculations by ecoregion. Note that there might be duplicates
# for an ecoregion, as polygons might have been discontinuous. Add the values
# directly to the each polygon; we can use that to make rasters later.
#-----------------------------------------------------------------------------#

#----- All veg ---------------------------------------------------------------#
all_veg_dat <- read.csv("../all_veg_cells_by_ecoregion_long_FRI50.csv")

dat <- 
  # Group by ecoregion and sum area, area burned, and FRI
  all_veg_dat %>% group_by(Name) %>% 
  summarise(Area = sum(Total_Area), 
            Burned = sum(Area_Burned),
            FRI_Total = sum(Sum_FRI)) %>%
  
  # No empty regions that don't have this type of veg
  filter(Area > 0) %>%
  
  # Calculate mean FRI
  mutate(Mean_FRI = FRI_Total / Area) %>%
  
  # Calculate expected burned area
  mutate(Aexp = (Area * hist_time) / Mean_FRI) %>%
  
  # Calculate number of catchup burns - expected burn area minus actual burn 
  # area, divided by total area
  
  # To get to 0 deficit:
  mutate(Numburns0 = (Aexp - Burned) / Area) %>%
  
  # To get to -1.2 deficit:
  mutate(Numburns1_2 = ((Aexp/1.2) - Burned) / Area) %>%
  
  # To get to -2 deficit:
  mutate(Numburns2 = ((Aexp/2) - Burned) / Area) %>%
  
  # Cleanup
  select(-FRI_Total)

#----- Add relevant number to each polygon -----------------------------------#
eco$allveg_numburns0 <- NA
eco$allveg_numburns1_2 <- NA
eco$allveg_numburns2 <- NA
ind <- match(eco$NA_L3NAME, dat$Name)
eco$allveg_numburns0 <- dat$Numburns0[ind]
eco$allveg_numburns1_2 <- dat$Numburns1_2[ind]
eco$allveg_numburns2 <- dat$Numburns2[ind]

rm(dat)

#----- Forest ----------------------------------------------------------------#
forest_dat <- read.csv("../forest_cells_by_ecoregion_long_FRI50.csv")

dat <- forest_dat %>% group_by(Name) %>% 
  summarise(Area = sum(Total_Area), 
            Burned = sum(Area_Burned),
            FRI_Total = sum(Sum_FRI)) %>%
  filter(Area > 0) %>%
  mutate(Mean_FRI = FRI_Total / Area) %>%
  mutate(Aexp = (Area * hist_time) / Mean_FRI) %>%
  mutate(Numburns0 = (Aexp - Burned) / Area) %>%
  mutate(Numburns1_2 = ((Aexp/1.2) - Burned) / Area) %>%
  mutate(Numburns2 = ((Aexp/2) - Burned) / Area) %>%
  select(-FRI_Total)

eco$forest_numburns0 <- NA
eco$forest_numburns1_2 <- NA
eco$forest_numburns2 <- NA
ind <- match(eco$NA_L3NAME, dat$Name)
eco$forest_numburns0 <- dat$Numburns0[ind]
eco$forest_numburns1_2 <- dat$Numburns1_2[ind]
eco$forest_numburns2 <- dat$Numburns2[ind]

rm(dat)

#----- Grass -----------------------------------------------------------------#
grass_dat <- read.csv("../grass_cells_by_ecoregion_long_FRI50.csv")

dat <- grass_dat %>% group_by(Name) %>% 
  summarise(Area = sum(Total_Area), 
            Burned = sum(Area_Burned),
            FRI_Total = sum(Sum_FRI)) %>%
  filter(Area > 0) %>%
  mutate(Mean_FRI = FRI_Total / Area) %>%
  mutate(Aexp = (Area * hist_time) / Mean_FRI) %>%
  mutate(Numburns0 = (Aexp - Burned) / Area) %>%
  mutate(Numburns1_2 = ((Aexp/1.2) - Burned) / Area) %>%
  mutate(Numburns2 = ((Aexp/2) - Burned) / Area) %>%
  select(-FRI_Total)

eco$grass_numburns0 <- NA
eco$grass_numburns1_2 <- NA
eco$grass_numburns2 <- NA
ind <- match(eco$NA_L3NAME, dat$Name)
eco$grass_numburns0 <- dat$Numburns0[ind]
eco$grass_numburns1_2 <- dat$Numburns1_2[ind]
eco$grass_numburns2 <- dat$Numburns2[ind]

rm(dat)

#----- Shrubs ----------------------------------------------------------------#
shrub_dat <- read.csv("../shrub_cells_by_ecoregion_long_FRI50.csv")

dat <- shrub_dat %>% group_by(Name) %>% 
  summarise(Area = sum(Total_Area), 
            Burned = sum(Area_Burned),
            FRI_Total = sum(Sum_FRI)) %>%
  filter(Area > 0) %>%
  mutate(Mean_FRI = FRI_Total / Area) %>%
  mutate(Aexp = (Area * hist_time) / Mean_FRI) %>%
  mutate(Numburns0 = (Aexp - Burned) / Area) %>%
  mutate(Numburns1_2 = ((Aexp/1.2) - Burned) / Area) %>%
  mutate(Numburns2 = ((Aexp/2) - Burned) / Area) %>%
  mutate(Numburns = (Aexp - Burned) / Area) %>%
  select(-FRI_Total)

eco$shrub_numburns0 <- NA
eco$shrub_numburns1_2 <- NA
eco$shrub_numburns2 <- NA
ind <- match(eco$NA_L3NAME, dat$Name)
eco$shrub_numburns0 <- dat$Numburns0[ind]
eco$shrub_numburns1_2 <- dat$Numburns1_2[ind]
eco$shrub_numburns2 <- dat$Numburns2[ind]



#-----------------------------------------------------------------------------#
# Now make rasters of all these new fields
#-----------------------------------------------------------------------------#
# Template raster
def_rast <- rast(fri)

#-----------------------------------------------------------------------------#
# All veg
#-----------------------------------------------------------------------------#
# Mask back to the same cells that went in originally, because area is critical 
# here
all_veg <- terra::rast("../temp_rasters/combined_veg_area.tif")

# Create a raster that has 1 for areas where FRI > 50, and NA elsewhere
all_veg <- terra::mask(all_veg, fri)

for (lev in c("0", "1_2", "2")) {
  # Create a raster of ecoregion values
  allvegrast <- terra::rasterize(eco, def_rast, 
                                 field = paste0("allveg_numburns", lev), 
                                 touches = TRUE)
  
  # Mask the ecoregion values to the applicable vegetation
  allvegrast <- terra::mask(allvegrast, all_veg)
  
  # Write out and save
  terra::writeRaster(allvegrast, 
            paste0("../temp_rasters/eco_all_veg_numburns", lev, ".tif"), 
            overwrite=T)
  rm(allvegrast)
}
rm(all_veg)
gc()

#-----------------------------------------------------------------------------#
# Forest
#-----------------------------------------------------------------------------#
forest <- terra::rast("../western_us_forest.tif")
forest <- terra::mask(forest, fri)
for (lev in c("0", "1_2", "2")) {
  forestrast <- rasterize(eco, def_rast, 
                          field = paste0("forest_numburns", lev), 
                          touches = TRUE)
  forestrast <- terra::mask(forestrast, forest)
  terra::writeRaster(forestrast, 
        paste0("../temp_rasters/eco_forest_numburns", lev, ".tif"), overwrite=T)
  rm(forestrast)
}
rm(forest)
gc()

#-----------------------------------------------------------------------------#
# Grass
#-----------------------------------------------------------------------------#
grass <- terra::rast("../western_us_grass.tif")
grass <- terra::mask(grass, fri)
for (lev in c("0", "1_2", "2")) {
  grassrast <- rasterize(eco, def_rast, 
                         field = paste0("grass_numburns", lev), 
                         touches = TRUE)
  grassrast <- terra::mask(grassrast, grass)
  terra::writeRaster(grassrast, 
      paste0("../temp_rasters/eco_grass_numburns", lev, ".tif"), overwrite=T)
  rm(grassrast)
}
rm(grass)
gc()

#-----------------------------------------------------------------------------#
# Shrub
#-----------------------------------------------------------------------------#
shrub <- terra::rast("../western_us_shrub.tif")
shrub <- terra::mask(shrub, fri)
for (lev in c("0", "1_2", "2")) {
  shrubrast <- rasterize(eco, def_rast, 
                         field = paste0("shrub_numburns", lev), 
                         touches = TRUE)
  shrubrast <- terra::mask(shrubrast, shrub)
  terra::writeRaster(shrubrast, 
          paste0("../temp_rasters/eco_shrub_numburns", lev, ".tif"), 
          overwrite=T)
  rm(shrubrast)
}
rm(shrub)
gc()
```









```{r catchup-burns-calcs}
#| eval: false

#-----------------------------------------------------------------------------#
# This section combines short and long FRI rasters and does final calculations.
#-----------------------------------------------------------------------------#

# This FRI is just to ID forest types
fri <- terra::rast("../temp_rasters/all_fri_vals.tif")
veg <- terra::rast("../temp_rasters/combined_veg_area.tif")
wui <- terra::rast("../temp_rasters/wui.tif")

#----- Load states -----------------------------------------------------------#
states <- terra::vect("../Data/s_05mr24.shp")
states <- terra::project(states, fri)
states <- terra::crop(states, fri)

all_states <- unique(states$NAME)

# Remove state slivers
all_states <- all_states[which(!all_states %in% c("North Dakota", "Texas",
                                                  "Kansas", "Oklahoma",
                                                  "South Dakota", "Nebraska"))]

unified_table <- NULL


#----- Do all three burn levels separately -----------------------------------#
for (lev in c("0", "1_2", "2")) {
  
  #----- Make a unified burn map ---------------------------------------------#
  catchup_short <- terra::rast(paste0("../temp_rasters/catchup_burns", lev, ".tif"))
  forest_long   <- terra::rast(paste0("../temp_rasters/eco_forest_numburns", lev, ".tif"))
  grass_long    <- terra::rast(paste0("../temp_rasters/eco_grass_numburns", lev, ".tif"))
  shrub_long    <- terra::rast(paste0("../temp_rasters/eco_shrub_numburns", lev, ".tif"))
  
  #----- A brief testing section. There should be no overlap in values ---------#
  double_check <- T
  if (double_check) {
    vv1 <- catchup_short + forest_long
    if (!is.nan(unlist(global(vv1, fun="min")))) stop("uh oh")
    
    vv1 <- catchup_short + grass_long
    if (!is.nan(unlist(global(vv1, fun="min")))) stop("uh oh")
    
    vv1 <- catchup_short + shrub_long
    if (!is.nan(unlist(global(vv1, fun="min")))) stop("uh oh")
    
    vv1 <- grass_long + forest_long
    if (!is.nan(unlist(global(vv1, fun="min")))) stop("uh oh")
    
    vv1 <- shrub_long + forest_long
    if (!is.nan(unlist(global(vv1, fun="min")))) stop("uh oh")
    
    vv1 <- grass_long + shrub_long
    if (!is.nan(unlist(global(vv1, fun="min")))) stop("uh oh")
    rm(vv1)
    gc()
  }
  
  #----- If we turn NAs to 0s, we can just sum the rasters to create a 
  # unified raster -----------------------------------------------------------#
  catchup_short <- terra::classify(catchup_short, cbind(NA, 0))
  forest_long   <- terra::classify(forest_long  , cbind(NA, 0))
  grass_long    <- terra::classify(grass_long   , cbind(NA, 0))
  shrub_long    <- terra::classify(grass_long   , cbind(NA, 0))
  
  numburns <- sum(catchup_short, forest_long, grass_long, shrub_long)
  rm(catchup_short, forest_long, grass_long, shrub_long)
  gc()
  
  summary_table_dat <- NULL
  
  for (region_name in all_states) {
    
    region_shape <- states[states$NAME == region_name]
    
    #----- Clip burn catchup map ---------------------------------------------#
    numburns_crop <- terra::crop(numburns     , region_shape)
    numburns_crop <- terra::mask(numburns_crop, region_shape)
    
    #----- Clip FRI ----------------------------------------------------------#
    fri_crop <- terra::crop(fri     , region_shape)
    fri_crop <- terra::mask(fri_crop, region_shape)
    
    #----- Clip veg ----------------------------------------------------------#
    veg_crop <- terra::crop(veg     , region_shape)
    veg_crop <- terra::mask(veg_crop, region_shape)
    
    #----- Clip WUI ----------------------------------------------------------#
    wui_crop <- terra::crop(wui     , region_shape)
    wui_crop <- terra::mask(wui_crop, region_shape)
    #-------------------------------------------------------------------------#
    
    
    
    # Do two loops, one for including surplus, one for excluding
    state_stats <- NULL
    for (pass in 1:2) {
      
      #-----------------------------------------------------------------------#
      # Forests.
      # Frequent fire forests FRI 0-20 years
      # Frequent fire forest FRI 20-40
      # Infrequent fire forests (FRI > 40)
      #-----------------------------------------------------------------------#
      
      #----- ID forests by fire frequency ------------------------------------#
      forest_mask <- terra::ifel(veg_crop == "Forest", 1, NA)
      forest_fri  <- terra::mask(fri_crop, forest_mask)  
      forest_mat  <- cbind(c(0,20,40), c(20, 40, 100000), 1:3)
      forest_type <- terra::classify(forest_fri, forest_mat)
      levels(forest_type) <- data.frame(ID = 1:3, 
                                        category = c(
                                          "Frequent fire (FRI < 20)", 
                                          "Frequent fire (FRI 20-40)", 
                                          "Infrequent fire"))
      rm(forest_fri)
      invisible(gc())
      
      #----- Extract table stats ---------------------------------------------#
      
      #----- Amount to burn by forest type -----------------------------------#
      burntemp <- terra::mask(numburns_crop, forest_type)
      datum <- terra::zonal(burntemp, forest_type, fun="sum")
      summary_dat <- data.frame(Vegetation = levels(forest_type)[[1]]$category,
                                Numcells = NA)
      x <- match(datum$category, summary_dat$Vegetation)
      summary_dat$Numcells[x] <- datum$BPS_NAME
      rm(datum)
      invisible(gc())
      
      #----- Forest WUI ------------------------------------------------------#
      summary_dat <- rbind(summary_dat, 
                           data.frame(Vegetation = c("Forest WUI", 
                                                     "Forest non-WUI"),
                                      Numcells = 0))
      
      datum <- mask(burntemp, wui_crop)
      summary_dat$Numcells[summary_dat$Vegetation == "Forest WUI"] <- 
        unlist(global(datum, fun="sum", na.rm=T))
      datum <- mask(burntemp, wui_crop, inverse=T)
      summary_dat$Numcells[summary_dat$Vegetation == "Forest non-WUI"] <- 
        unlist(global(datum, fun="sum", na.rm=T))
      rm(datum, burntemp)
      invisible(gc())
      #-----------------------------------------------------------------------#
      
      
      
      
      #-----------------------------------------------------------------------#
      # Grass
      #-----------------------------------------------------------------------#
      grass_mask <- terra::ifel(veg_crop == "Grass", 1, NA)
      
      #----- Extract table stats ---------------------------------------------#
      
      #----- Amount to burn --------------------------------------------------#
      burntemp <- terra::mask(numburns_crop, grass_mask)
      datum <- unlist(global(burntemp, fun="sum", na.rm=T))
      summary_dat <- rbind(summary_dat,
                           data.frame(Vegetation = "Grass",
                                      Numcells = datum))
      
      #----- Grass WUI -------------------------------------------------------#
      summary_dat <- rbind(summary_dat, 
                           data.frame(Vegetation = c("Grass WUI", 
                                                     "Grass non-WUI"),
                                      Numcells = 0))
      
      datum <- mask(burntemp, wui_crop)
      summary_dat$Numcells[summary_dat$Vegetation == "Grass WUI"] <- 
        unlist(global(datum, fun="sum", na.rm=T))
      datum <- mask(burntemp, wui_crop, inverse=T)
      summary_dat$Numcells[summary_dat$Vegetation == "Grass non-WUI"] <- 
        unlist(global(datum, fun="sum", na.rm=T))
      rm(datum, grass_mask, burntemp)
      invisible(gc())
      
      
      
      #-----------------------------------------------------------------------#
      # Shrubs
      #-----------------------------------------------------------------------#
      shrub_mask <- terra::ifel(veg_crop == "Shrub", 1, NA)
      
      #----- Extract table stats ---------------------------------------------#
      
      #----- Amount to burn --------------------------------------------------#
      burntemp <- terra::mask(numburns_crop, shrub_mask)
      datum <- unlist(global(burntemp, fun="sum", na.rm=T))
      summary_dat <- rbind(summary_dat,
                           data.frame(Vegetation = "Shrub",
                                      Numcells = datum))
      
      #----- Shrub WUI -------------------------------------------------------#
      summary_dat <- rbind(summary_dat, 
                           data.frame(Vegetation = c("Shrub WUI", 
                                                     "Shrub non-WUI"),
                                      Numcells = 0))
      
      datum <- mask(burntemp, wui_crop)
      summary_dat$Numcells[summary_dat$Vegetation == "Shrub WUI"] <- 
        unlist(global(datum, fun="sum", na.rm=T))
      datum <- mask(burntemp, wui_crop, inverse=T)
      summary_dat$Numcells[summary_dat$Vegetation == "Shrub non-WUI"] <- 
        unlist(global(datum, fun="sum", na.rm=T))
      rm(datum, shrub_mask, burntemp)
      invisible(gc())
      
      if (pass == 1) {
        
        #----- This is the first pass: label the stats so far ----------------#
        state_stats <- summary_dat
        names(state_stats)[names(state_stats)=="Numcells"] <- "Sumplussur"
        
        #----- Mask out negative (surplus) values in numburns ----------------#
        numburns_crop <- terra::ifel(numburns_crop < 0, 0, numburns_crop)
        
      } else {
        
        #----- This is the second pass: label the stats ----------------------#
        names(summary_dat)[names(summary_dat)=="Numcells"] <- "Sumnosur"
        summary_dat <- merge(summary_dat, state_stats, by = "Vegetation")
      }
    } # end of for (pass in 1:2) {
    
    summary_dat$State = region_name
    summary_table_dat <- rbind(summary_table_dat, summary_dat)
  }
  
  #----- Convert cell sums to area -------------------------------------------#
  summary_table_dat[[paste0("Area_ha_nosur_", lev)]] <- 
    summary_table_dat$Sumnosur * prod(res(numburns_crop))/10000
  summary_table_dat[[paste0("Area_ha_plussur_", lev)]] <- 
    summary_table_dat$Sumplussur * prod(res(numburns_crop))/10000
  summary_table_dat$Sumnosur <- NULL
  summary_table_dat$Sumplussur <- NULL
  
  if (is.null(unified_table)) {
    unified_table = summary_table_dat
  } else {
    unified_table <- merge(unified_table, summary_table_dat, by=c("State", "Vegetation"))
  }
} # for (lev in c("0", "1_2", "2"))



write.csv(unified_table, "../States 10 year burn catchup.csv", row.names=F)

```